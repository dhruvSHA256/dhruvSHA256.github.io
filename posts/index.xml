<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on dhruv.Sha256</title>
        <link>https://dhruvsha256.github.io/posts/</link>
        <description>Recent content in Posts on dhruv.Sha256</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Wed, 01 Nov 2023 14:51:45 +0530</lastBuildDate>
        <atom:link href="https://dhruvsha256.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Map, Filter, Reduce in python</title>
            <link>https://dhruvsha256.github.io/posts/2022/07/map-filter-reduce-in-python/</link>
            <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/07/map-filter-reduce-in-python/</guid>
            <description>li = [x for x in range(100)] map: li = list(map(lambda x : x/2,li)) map(function,iteritable) return a map object after applying given function to all elements of, which can be then converted to a list iteritable equivalent to for x in li: x = x/2 filter: even = list(filter(lambda x : x%2 == 0 ,li)) filter(function,iteritable) return a filter object after applying given function to all elements of iteritable equivalent to even = [] for x in li: if x%2 == 0 : even.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>     li <span style="color:#f92672">=</span> [x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>)]
</span></span></code></pre></div><h2 id="map">map:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  li <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x : x<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>,li))
</span></span></code></pre></div><ul>
<li>map(function,iteritable)</li>
<li>return a map object after applying given function to all elements of, which can be
then converted to a list
iteritable</li>
<li>equivalent to</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> li:
</span></span><span style="display:flex;"><span>      x <span style="color:#f92672">=</span> x<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>
</span></span></code></pre></div><h2 id="filter">filter:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  even <span style="color:#f92672">=</span> list(filter(<span style="color:#66d9ef">lambda</span> x : x<span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> ,li))
</span></span></code></pre></div><ul>
<li>filter(function,iteritable)</li>
<li>return a filter object after applying given function to all elements
of iteritable</li>
<li>equivalent to</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  even <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> li:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> x<span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> :
</span></span><span style="display:flex;"><span>          even<span style="color:#f92672">.</span>append(x)
</span></span></code></pre></div><h2 id="reduce">reduce:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> reduce
</span></span><span style="display:flex;"><span>  maxx <span style="color:#f92672">=</span> reduce( <span style="color:#66d9ef">lambda</span> x,y : x <span style="color:#66d9ef">if</span> x <span style="color:#f92672">&gt;</span> y <span style="color:#66d9ef">else</span> y, li)
</span></span><span style="display:flex;"><span>  print(maxx)
</span></span></code></pre></div><ul>
<li>reduce(function,iteritable)</li>
<li>have to import it from functools module</li>
<li>return a map object after applying given function to all elements of
iteritable</li>
<li>equivalent to</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  y <span style="color:#f92672">=</span> li[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>  maxx <span style="color:#f92672">=</span> y
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> li:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> x <span style="color:#f92672">&gt;</span> y :
</span></span><span style="display:flex;"><span>          maxx <span style="color:#f92672">=</span> x
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> :
</span></span><span style="display:flex;"><span>          maxx <span style="color:#f92672">=</span> y
</span></span><span style="display:flex;"><span>  print(maxx)
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>hello world</title>
            <link>https://dhruvsha256.github.io/posts/2022/07/hello-world/</link>
            <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/07/hello-world/</guid>
            <description>Code snippet #include&amp;lt;iostream&amp;gt; using namespace std; ing main(){ cout &amp;lt;&amp;lt; &amp;#34;hello world&amp;#34;; return 0; } Latex The following $$\int_{a}^{b} x^2 dx$$ Is an integral</description>
            <content type="html"><![CDATA[<h2 id="code-snippet">Code snippet</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include&lt;iostream&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span>ing <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;hello world&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="latex">Latex</h2>
<p>The following
$$\int_{a}^{b} x^2 dx$$
Is an integral</p>
]]></content>
        </item>
        
        <item>
            <title>Layer 4 Load balancer from scratch in Python</title>
            <link>https://dhruvsha256.github.io/posts/2023/11/layer-4-load-balancer-from-scratch-in-python/</link>
            <pubDate>Wed, 01 Nov 2023 14:51:45 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2023/11/layer-4-load-balancer-from-scratch-in-python/</guid>
            <description>Have you ever wondered how web applications handle increasing traffic? As a software engineer, you might have heard of load balancers, which play a crucial role in managing the distribution of requests to multiple servers. This weekend, I decided to dive deep into socket programming and create a simple yet functional Layer 4 load balancer from scratch in Python. In this blog post, I&amp;rsquo;ll walk you through the process.
What is a Load Balancer anyway ?</description>
            <content type="html"><![CDATA[<p>Have you ever wondered how web applications handle increasing traffic? As a software engineer, you might have heard of load balancers,
which play a crucial role in managing the distribution of requests to multiple servers.
This weekend, I decided to dive deep into socket programming and create a simple yet functional Layer 4 load balancer from scratch in Python.
In this blog post, I&rsquo;ll walk you through the process.</p>
<h3 id="what-is-a-load-balancer-anyway-">What is a Load Balancer anyway ?</h3>
<p>What is a load balancer anyway you may ask.
Imagine you&rsquo;ve built your own onlyfans clone, and it&rsquo;s gaining traction.
To handle the increased traffic, you can&rsquo;t infinitely scale your single server vertically.
Instead, you buy multiple servers and host your site across them.
However, a new problem arises: how do you effectively utilize the resources of all these servers? The answer is a load balancer.
It distributes incoming requests to different servers based on a selection criteria, like a simple round-robin algorithm.</p>
<h3 id="layer-4-vs-layer-7-load-balancers">Layer 4 vs. Layer 7 Load Balancers</h3>
<ul>
<li>A layer 7 load balancer works on you guessed it right, layer 7 of OSI model which is the
application layer, so for every incoming request, it do multiple things like eliminating
TLS, based on the data received redirect it to a specific server.
The whole flow goes like this: client -&gt; load balancer (decodes request) -&gt; server
Loadbalancer essentially creates a new request to server.
All the data in request body is accessible to it. So we can say it can do things a
little smartly.</li>
</ul>
<pre class="mermaid">sequenceDiagram
    participant Client
    participant LoadBalancer
    participant Server
    Client->>LoadBalancer: Request R1
    LoadBalancer->>Server: Request R2
    Server->>LoadBalancer: Response R1
    LoadBalancer->>Client: Response R2
</pre>

<ul>
<li>A layer 4 load balancer on the other hand works on (you guess), which is Transport Layer of OSI model.
It instead of decoding the request, directly sends the packet to server.
It basically act as a relay between client and server, which is faster but &hellip; dumb.</li>
</ul>
<h3 id="the-code">The code</h3>
<p>Let&rsquo;s dive into the code to build our Layer 4 load balancer.
The first step is to listen to an address and receive data from clients.
We will be using Python&rsquo;s socket library for this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    sock <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        sock<span style="color:#f92672">.</span>bind((HOST, PORT))
</span></span><span style="display:flex;"><span>        sock<span style="color:#f92672">.</span>listen()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Listening on port: </span><span style="color:#e6db74">{</span>PORT<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            client_conn, client_addr <span style="color:#f92672">=</span> sock<span style="color:#f92672">.</span>accept()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">with</span> client_conn:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Connected by </span><span style="color:#e6db74">{</span>client_addr<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                data <span style="color:#f92672">=</span> client_conn<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>                print(data<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>        sock<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>Now that we are receiving connections from clients,
we need to somehow relay requests and responses between them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">forward_request</span>(source, destination):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sending data from </span><span style="color:#e6db74">{</span>source<span style="color:#f92672">.</span>getsockname()<span style="color:#e6db74">}</span><span style="color:#e6db74"> to </span><span style="color:#e6db74">{</span>destination<span style="color:#f92672">.</span>getsockname()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>                data <span style="color:#f92672">=</span> source<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> len(data) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>                destination<span style="color:#f92672">.</span>send(data)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>            source<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>            destination<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>We will be needing two separate threads for this (one for receiving client request and
sending it to server, and one receiving server response and sending it to client)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    c2b_thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>forward_request, args<span style="color:#f92672">=</span>(client_conn, backend_conn))
</span></span><span style="display:flex;"><span>    b2c_thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>forward_request, args<span style="color:#f92672">=</span>(backend_conn, client_conn))
</span></span><span style="display:flex;"><span>    c2b_thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    b2c_thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    c2b_thread<span style="color:#f92672">.</span>join()
</span></span><span style="display:flex;"><span>    b2c_thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>Now comes the tricky part: what if one server dies? It would be foolish to relay requests to a dead server.
We need a heartbeat mechanism to periodically check if the server is up and running.
If it isn&rsquo;t, we should exclude it from our pool of servers.
We must perform this operation without blocking our primary server, so we&rsquo;ll create a separate thread for it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_server_heart_beat</span>(server):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;http://</span><span style="color:#e6db74">{</span>server<span style="color:#f92672">.</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">{</span>server<span style="color:#f92672">.</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">/health&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> resp<span style="color:#f92672">.</span>text <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;up&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_heartbeat</span>(server, delay):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>            server_heart_beat <span style="color:#f92672">=</span> get_server_heart_beat(server)
</span></span><span style="display:flex;"><span>            server<span style="color:#f92672">.</span>update_health_status(server_heart_beat)
</span></span><span style="display:flex;"><span>            sleep(delay)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_health</span>(servers):
</span></span><span style="display:flex;"><span>        threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> servers:
</span></span><span style="display:flex;"><span>            t <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>update_heartbeat, args<span style="color:#f92672">=</span>(s, <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">.</span>append(t)
</span></span><span style="display:flex;"><span>            t<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> threads
</span></span></code></pre></div><p>We are almost done just need to test our load balancer.</p>
<script data-theme="asciinema" src="https://asciinema.org/a/618289.js" id="asciicast-618289" async></script>
<p>Full code can be found on my <a href="https://github.com/dhruvSHA256/load-balancer">github</a></p>
]]></content>
        </item>
        
        <item>
            <title>Solid Principles in Python</title>
            <link>https://dhruvsha256.github.io/posts/2023/05/solid-principles-in-python/</link>
            <pubDate>Tue, 02 May 2023 14:45:14 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2023/05/solid-principles-in-python/</guid>
            <description>S - Single Responsibility Principle O - Open/Closed Principle L - Liskov Substitution Principle I - Interface Segmented Principle D - Dependency Inversion Principle Single Responsiblity: any module should be changed by only one actor dont put multiple functionalities in single module
class PasswordHasher: def hashAndSavePassword(self, password: str): self.hashPassword(password) self.savePassword(password) def hashPassword(self, password: str): print(f&amp;#34;haashing {password}&amp;#34;) def savePassword(self, password: str): print(f&amp;#34;saving {password}&amp;#34;) for example in above code snippet the class PasswordHasher is doing two independent operations, and the actor that can change its implementation can be security team which can change hashing implementation or data team which may change how passwords are stored, this doesnt follow single responsiblity principle Both functionalities should be seperated</description>
            <content type="html"><![CDATA[<p>S - Single Responsibility Principle
<br>
O - Open/Closed Principle
<br>
L - Liskov Substitution Principle
<br>
I - Interface Segmented Principle
<br>
D - Dependency Inversion Principle
<br></p>
<h3 id="single-responsiblity">Single Responsiblity:</h3>
<p>any module should be changed by only one actor
dont put multiple functionalities in single module</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordHasher</span>:
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashAndSavePassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>         self<span style="color:#f92672">.</span>hashPassword(password)
</span></span><span style="display:flex;"><span>         self<span style="color:#f92672">.</span>savePassword(password)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>         print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;haashing </span><span style="color:#e6db74">{</span>password<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">savePassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>         print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;saving </span><span style="color:#e6db74">{</span>password<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>for example in above code snippet the class <code>PasswordHasher</code> is doing two independent
operations, and the actor that can change its implementation can be security team
which can change hashing implementation or data team which may change how passwords
are stored, this doesnt follow single responsiblity principle
Both functionalities should be seperated</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordHasher</span>:
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>         print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hashing </span><span style="color:#e6db74">{</span>password<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordStorage</span>:
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">savePassword</span>(self, passwordHash: str):
</span></span><span style="display:flex;"><span>         print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;saving </span><span style="color:#e6db74">{</span>passwordHash<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><h3 id="open-close">Open Close:</h3>
<p>open for extension but closed for modification</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HashingType</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordHasher</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> __init__(self, password: str, hashingType: HashingType):
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>password <span style="color:#f92672">=</span> password
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>hashingType <span style="color:#f92672">=</span> hashingType
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>hashingType <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;base64&#34;</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># hash password with bas64</span>
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>hashingType <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;sha256&#34;</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># hash password with sha256</span>
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">elif</span> self<span style="color:#f92672">.</span>hashingType <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;md5&#34;</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># hash password with md5</span>
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">pass</span>
</span></span></code></pre></div><p>in above code snippet, if we need to add one more hashing type, we need to modify the
<code>PasswordHasher</code> class which voilates the Open Close principle.
We should make the <code>HashingType</code> class more extensible</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IHashingType</span>(metaclass<span style="color:#f92672">=</span>ABCMeta):
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">@abstractmethod</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Base64Hashing</span>(IHashingType):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># hash password with bas64</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Md5Hashing</span>(IHashingType):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># hash password with md5</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SHA256Hashing</span>(IHashingType):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self, password: str):
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># hash password with sha256</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordHasher</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> __init__(self, password: str, hashingType: IHashingType):
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>password <span style="color:#f92672">=</span> password
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>hashingType <span style="color:#f92672">=</span> hashingType
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hashPassword</span>(self):
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>hashingType<span style="color:#f92672">.</span>hashPassword(self<span style="color:#f92672">.</span>password)
</span></span></code></pre></div><p>This way we just need to add another class for different hashing type</p>
<h3 id="liskov-substution">Liskov Substution:</h3>
<p>if their is f(x) for some object x of class A
then their should be f(y) for some object y of class B if B inherits A
if class CitrusFruit inherit class Fruit
then eat(fruit) should support both, orange of CitrusFruit and banana of Fruit
function should take argument of both base class and derived class and should not break</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> __init__(self, name: str):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CitrusFruit</span>(Fruit):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">eat</span>(fruit):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(fruit, CitrusFruit):
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Eating citrus fruit: </span><span style="color:#e6db74">{</span>fruit<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> isinstance(fruit, Fruit):
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Eating fruit: </span><span style="color:#e6db74">{</span>fruit<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#34;banana&#34;</span>)
</span></span><span style="display:flex;"><span>    orange <span style="color:#f92672">=</span> CitrusFruit(<span style="color:#e6db74">&#34;orange&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    eat(banana)
</span></span><span style="display:flex;"><span>    eat(orange)
</span></span></code></pre></div><p>here the behaviour of <code>eat()</code> changes with the type of object it is passed which doest
follow liskov substitution principle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> __init__(self, name: str):
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">eat</span>(self):
</span></span><span style="display:flex;"><span>          print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Eating fruit: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CitrusFruit</span>(Fruit):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">eat</span>(self):
</span></span><span style="display:flex;"><span>          print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Eating citrus fruit: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">eat</span>(fruit: Fruit):
</span></span><span style="display:flex;"><span>      fruit<span style="color:#f92672">.</span>eat()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#34;banana&#34;</span>)
</span></span><span style="display:flex;"><span>  orange <span style="color:#f92672">=</span> CitrusFruit(<span style="color:#e6db74">&#34;orange&#34;</span>)
</span></span><span style="display:flex;"><span>  eat(banana)
</span></span><span style="display:flex;"><span>  eat(orange)
</span></span></code></pre></div><p>Now <code>eat()</code> behaves same for <code>Fruit</code> or its subclass <code>CitrusFruit</code></p>
<h3 id="interface-segregation">Interface Segregation:</h3>
<p>design multiple smaller interfaces</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>  <span style="color:#f92672">from</span> abc <span style="color:#f92672">import</span> ABCMeta, abstractmethod
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IShape</span>(metaclass<span style="color:#f92672">=</span>ABCMeta):
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">@abstractmethod</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">draw</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NotImplementedError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Circle</span>(IShape):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">draw</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Square</span>(IShape):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">draw</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Rectangle</span>(IShape):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">draw</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span></code></pre></div><h3 id="dependency-inversion">Dependency Inversion:</h3>
<p>high level module should not depend on low level module
both should depend on abstraction
abstraction should not depend on implementation
implementation shouldnt depend on abstraction
ex: store class has a fn makePayment which makes payment
instead of initializing a class StripePayment in it
make a interface HandlePayment, StripePayment and Paypalpayment both extends it
not pass any object of HandlePayment interface in makePayment fn</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StripePayment</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">makePayment</span>(self):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Store</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">makeStripePayment</span>(self):
</span></span><span style="display:flex;"><span>            stripePayment <span style="color:#f92672">=</span> StripePayment()
</span></span><span style="display:flex;"><span>            stripePayment<span style="color:#f92672">.</span>makePayment()
</span></span></code></pre></div><p>the fn <code>makeStripePayment()</code> initializes the object of <code>StripePayment</code> in its implementation
suppose we need to test it using Mock payment api, then we it would be hard for us as we need to change the implementation of fn just to test.
so instead of initializing payment object and depending on its concreat
implementation we should depend on an interface instead (which will be implemented by
StripePayment class) and take that as an argument</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IPayment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">makePayment</span>(self):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StripePayment</span>(IPayment):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">makePayment</span>(self):
</span></span><span style="display:flex;"><span>          print(<span style="color:#e6db74">&#34;making payment using stripe&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Store</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">makePayment</span>(self, paymentObj: IPayment):
</span></span><span style="display:flex;"><span>          paymentObj<span style="color:#f92672">.</span>makePayment()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  store <span style="color:#f92672">=</span> Store()
</span></span><span style="display:flex;"><span>  stripePayment <span style="color:#f92672">=</span> StripePayment()
</span></span><span style="display:flex;"><span>  store<span style="color:#f92672">.</span>makePayment(stripePayment)
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Postgresql Indexes</title>
            <link>https://dhruvsha256.github.io/posts/2022/12/postgresql-indexes/</link>
            <pubDate>Mon, 19 Dec 2022 11:34:05 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/12/postgresql-indexes/</guid>
            <description>Indexes What a data structure, can make some queries fast Why cause, without index every query will be a sequential scan from disk whole point of index is to make query faster than O(n) so why not create an index for each type of query, cause indexes makes updating slow as we have to update indexes it also increases disk usage, slows down backup and restore Single Column Index index made on a single attribute Multi Column Index index made on a group of attribute Partial Index index made on a subset of table ex: index on all the incomplete appointments in appointments table B+ Tree Index uses B+ Tree for creating indexes default in postgresql stores pointer to heap file and not actual data better to store actual data for primary index as reading from heap file is another disk i/o used for query with operations like &amp;lt;, &amp;lt;= , = ,&amp;gt;=,&amp;gt; can be used for range queries, first go to the start of range in O(log(n)) and then traverse to next node can be used for patterns like ^foo or foo% (constant prefix) but not with %foo as BTree are sorted based on first char not suitable for large values of key as btree copies the key value in nodes -&amp;gt; less keys per node -&amp;gt; tree with more depth Hash Index uses hash table instead of btree PostgreSQL&amp;rsquo;s hash function maps any database value to a 32-bit integer, the hash code (about 4 billion possible hash codes) hashfunction(index attribute) -&amp;gt; bucket which contains pointer to the rows -&amp;gt; actual data in table can be smaller in size than btree Hash index select and insert performance can be better than a B-Tree index suitable for update heavy queries which uses equality operator should be used with equality operator and not with comparative operators, example select * from table where key = &#39;hello&#39; suitable for large values as their too are converted to 32 bit int values BRIN Index Block range index A block range is a group of pages that are physically adjacent in the table; for each block range, some summary info is stored by the index ex: a table storing a ZIP code column might have all codes for a city grouped together naturally.</description>
            <content type="html"><![CDATA[<h2 id="indexes">Indexes</h2>
<h3 id="what">What</h3>
<ul>
<li>a data structure, can make some queries fast</li>
</ul>
<h3 id="why">Why</h3>
<ul>
<li>cause, without index every query will be a sequential scan from disk</li>
<li>whole point of index is to make query faster than O(n)</li>
<li>so why not create an index for each type of query, cause indexes makes updating slow as we have to update indexes</li>
<li>it also increases disk usage, slows down backup and restore</li>
</ul>
<h2 id="single-column-index">Single Column Index</h2>
<ul>
<li>index made on a single attribute</li>
</ul>
<h2 id="multi-column-index">Multi Column Index</h2>
<ul>
<li>index made on a group of attribute</li>
</ul>
<h2 id="partial-index">Partial Index</h2>
<ul>
<li>index made on a subset of table</li>
<li>ex: index on all the incomplete appointments in appointments table</li>
</ul>
<h2 id="b-tree-index">B+ Tree Index</h2>
<ul>
<li>uses B+ Tree for creating indexes</li>
<li>default in postgresql</li>
<li>stores pointer to heap file and not actual data</li>
<li>better to store actual data for primary index as reading from heap file is another disk i/o</li>
<li>used for query with operations like &lt;, &lt;= , = ,&gt;=,&gt;</li>
<li>can be used for range queries, first go to the start of range in O(log(n)) and then traverse to next node</li>
<li>can be used for patterns like ^foo or foo% (constant prefix) but not with %foo as BTree are sorted based on first char</li>
<li>not suitable for large values of key as btree copies the key value in nodes -&gt; less keys per node -&gt; tree with more depth</li>
</ul>
<h2 id="hash-index">Hash Index</h2>
<ul>
<li>uses hash table instead of btree</li>
<li>PostgreSQL&rsquo;s hash function maps any database value to a 32-bit integer, the hash code (about 4 billion possible hash codes)</li>
<li>hashfunction(index attribute) -&gt; bucket which contains pointer to the rows -&gt; actual data in table</li>
<li>can be smaller in size than btree</li>
<li>Hash index select and insert performance can be better than a B-Tree index</li>
<li>suitable for update heavy queries which uses equality operator</li>
<li>should be used with equality operator and not with comparative operators, example <code>select * from table where key = 'hello'</code></li>
<li>suitable for large values as their too are converted to 32 bit int values</li>
</ul>
<h2 id="brin-index">BRIN Index</h2>
<ul>
<li>Block range index</li>
<li>A block range is a group of pages that are physically adjacent in the table; for each block range, some summary info is stored by the index</li>
<li>ex: a table storing a ZIP code column might have all codes for a city grouped together naturally.</li>
<li>When you set up a BRIN index, PostgreSQL reads your selected column&rsquo;s maximum and minimum values for each 8k page of stored data. PostgreSQL then stores just 3 pieces of information into the BRIN index, the page number, the minimum value and the maximum value for your chosen column.</li>
<li>more suitable for read heavy data, which is not updated frequently as updating can mess up ranges</li>
<li>used for very large datasets where the data we are searching is in blocks, like timestamps and date ranges.</li>
<li>size of index is very small</li>
</ul>
<h2 id="gin-index">GIN Index</h2>
<ul>
<li>Generalized inverted index</li>
<li>used where we need to index composite value</li>
<li>used for jsonb and array and tsvector (full text search)</li>
<li>organizes keys (like normalized words) into btree</li>
<li>node of btree contains lexmins and these lexmins points to the tuple id they exist in</li>
<li>supports query with operators:
<ul>
<li>@&gt; (contains)</li>
<li>&lt;@ (contained)</li>
<li>&amp;&amp; (overlap)</li>
<li>|| (concat)</li>
</ul>
</li>
</ul>
<h2 id="gist-index">GiST Index</h2>
<ul>
<li>generalized search tree</li>
<li>a framework, not a single index</li>
<li>used for spatial data and geometrical data</li>
<li>postgresql includes GiST operator classes for several 2D geometric data types</li>
<li>capable of optimizing nearest neighbour searches</li>
<li>supports query with operators:
<ul>
<li>&lt;&lt; (left side)</li>
<li>&amp;&lt; (not exceed to right)</li>
<li>&amp;&gt; (not exceed to left)</li>
<li>&gt;&gt; (right side)</li>
<li>&lt;&lt;| (below)</li>
<li>&amp;&lt;| (not exceed above)</li>
<li>|&amp;&gt; (not exceed below)</li>
<li>|&gt;&gt; (above)</li>
<li>@&gt; (contains)</li>
<li>&lt;@ (contained)</li>
<li>~= (same)</li>
<li>&amp;&amp;  (overlap)</li>
</ul>
</li>
</ul>
<h2 id="bloom-index">Bloom Index</h2>
<ul>
<li>sort of like hash but different</li>
<li>uses Bloom Filters</li>
<li>used for multicolumn indexing</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Happiness</title>
            <link>https://dhruvsha256.github.io/posts/2022/08/happiness/</link>
            <pubDate>Sun, 14 Aug 2022 11:13:47 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/08/happiness/</guid>
            <description>What is Happiness Is it a state when you are not sad you are not sad when people do something which is beneficial for their survival and reproduction you have this feeling of happiness, when your brain rewards you with some chemicals do we have to be happy all the time ?? Is it immoral to not be happy ?? Is happiness a social construct ?? Why do feel sad for people who are not happy How can you be happy have a sense of belonging have a sense of agency have a sense of purpose Find your purpose in a tribe Find a tribe can be your friends, your family, someone you love, a group of people sharing common interests etc.</description>
            <content type="html"><![CDATA[<h1 id="what-is-happiness">What is Happiness</h1>
<ul>
<li>Is it a state when you are not sad</li>
<li>you are not sad when people do something which is beneficial for their survival and reproduction</li>
<li>you have this feeling of happiness, when your brain rewards you with some chemicals</li>
<li>do we have to be happy all the time ??</li>
<li>Is it immoral to not be happy ??</li>
<li>Is happiness a social construct ??</li>
<li>Why do feel sad for people who are not happy</li>
</ul>
<h1 id="how-can-you-be-happy">How can you be happy</h1>
<ul>
<li>have a sense of belonging</li>
<li>have a sense of agency</li>
<li>have a sense of purpose</li>
</ul>
<h2 id="find-your-purpose-in-a-tribe">Find your purpose in a tribe</h2>
<h3 id="find-a-tribe">Find a tribe</h3>
<ul>
<li>can be your friends, your family, someone you love, a group of people sharing common interests etc. etc.</li>
</ul>
<h3 id="get-accepted-by-the-tribe">Get accepted by the tribe</h3>
<ul>
<li>have a sense of belonging</li>
</ul>
<h3 id="help-the-tribe">Help the tribe</h3>
<ul>
<li>make efforts and have a sense that your efforts matter</li>
</ul>
<h3 id="get-appreciated-by-the-tribe-for-your-efforts">Get appreciated by the tribe for your efforts</h3>
<ul>
<li>acknowledged by the tribe for your efforts</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Car Radio - Twenty One Pilots</title>
            <link>https://dhruvsha256.github.io/posts/2022/08/car-radio-twenty-one-pilots/</link>
            <pubDate>Mon, 08 Aug 2022 01:28:08 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/08/car-radio-twenty-one-pilots/</guid>
            <description>distracting yourself by listening to car radio I ponder of something great My lungs will fill and then deflate They fill with fire Exhale desire I know it&amp;#39;s dire My time today I have these thoughts So often I ought To replace that slot With what I once bought &amp;#39;Cause somebody stole My car radio And now I just sit in silence he distracted himself by listening to his car radio, but someone stole it we distract ourselves from our meaningless by clinging to some idea, some person, some materialistic thing some became nihilist, some became hedonist, some became slave, some accept religion dealing with existential crisis Sometimes quiet is violent I find it hard to hide it My pride is no longer inside It&amp;#39;s on my sleeve My skin will scream Reminding me of Who I killed inside my dream I hate this car that I&amp;#39;m driving There&amp;#39;s no hiding for me I&amp;#39;m forced to deal with what I feel There is no distraction to mask what is real I could pull the steering wheel he got to know that his pride is not inside him but in how he is perceived by others he now know that he had killed himself in his dreams, just to fit in and now their is no car radio to distract him from this guilt he is fed up to the point that he even thought of killing himself (pulling the steering wheel) it is a frightening thought I ponder of something terrifying &amp;#39;Cause this time there&amp;#39;s no sound to hide behind I find over the course of our human existence One thing consists of consistence And it&amp;#39;s that we&amp;#39;re all battling fear Oh dear, I don&amp;#39;t know if we know why we&amp;#39;re here Oh my, Too deep Please stop thinking I liked it better when my car had sound this feeling, this thought is so frightening for him and he can&amp;rsquo;t suppress these only thing that is consistent in everybody&amp;rsquo;s life is that they are constantly battling with their suffering and fear He wants to stop thinking about this, and just be normal but ironically, normal is defined by others, and if you dont fit in their template of normal then you are not accepted as normal He wants to be normal and live in a delusional reality, or does he !</description>
            <content type="html"><![CDATA[<h2 id="distracting-yourself-by-listening-to-car-radio">distracting yourself by listening to car radio</h2>
<pre tabindex="0"><code class="language-_" data-lang="_">I ponder of something great
My lungs will fill and then deflate
They fill with fire
Exhale desire
I know it&#39;s dire
My time today
I have these thoughts
So often I ought
To replace that slot
With what I once bought
&#39;Cause somebody stole
My car radio
And now I just sit in silence
</code></pre><ul>
<li>he distracted himself by listening to his car radio, but someone
stole it</li>
<li>we distract ourselves from our meaningless by clinging to some idea,
some person, some materialistic thing</li>
<li>some became nihilist, some became hedonist, some became slave, some accept religion</li>
</ul>
<h2 id="dealing-with-existential-crisis">dealing with existential crisis</h2>
<pre tabindex="0"><code class="language-_" data-lang="_">Sometimes quiet is violent
I find it hard to hide it
My pride is no longer inside
It&#39;s on my sleeve
My skin will scream
Reminding me of
Who I killed inside my dream
I hate this car that I&#39;m driving
There&#39;s no hiding for me
I&#39;m forced to deal with what I feel
There is no distraction to mask what is real
I could pull the steering wheel
</code></pre><ul>
<li>he got to know that his pride is not inside him but in how he is
perceived by others</li>
<li>he now know that he had killed himself in his dreams, just to fit in
and now their is no car radio to distract him from this guilt</li>
<li>he is fed up to the point that he even thought of killing himself (pulling the
steering wheel)</li>
</ul>
<h2 id="it-is-a-frightening-thought">it is a frightening thought</h2>
<pre tabindex="0"><code class="language-_" data-lang="_">I ponder of something terrifying
&#39;Cause this time there&#39;s no sound to hide behind
I find over the course of our human existence
One thing consists of consistence
And it&#39;s that we&#39;re all battling fear
Oh dear, I don&#39;t know if we know why we&#39;re here
Oh my,
Too deep
Please stop thinking
I liked it better when my car had sound
</code></pre><ul>
<li>this feeling, this thought is so frightening for him and he can&rsquo;t
suppress these</li>
<li>only thing that is consistent in everybody&rsquo;s life is that they are
constantly battling with their suffering and fear</li>
<li>He wants to stop thinking about this, and just be <em>normal</em></li>
<li>but ironically, normal is defined by others, and if you dont fit in
their template of normal then you are not accepted as normal</li>
<li>He wants to be <em>normal</em> and live in a delusional reality, or does he !</li>
</ul>
<h2 id="dealing-with-it">dealing with it</h2>
<pre tabindex="0"><code class="language-_" data-lang="_">There are things we can do
But from the things that work there are only two
And from the two that we choose to do
Peace will win
And fear will lose
There&#39;s faith and there&#39;s sleep
We need to pick one please because
Faith is to be awake
And to be awake is for us to think
And for us to think is to be alive
And I will try with every rhyme
To come across like I am dying
To let you know you need to try to think
</code></pre><ul>
<li>now that you know that life has no meaning, you just accept it</li>
<li>enjoy it or you become delusional just like the majority of people</li>
<li>to have faith is to be awake and think (<code>I think therefore I am</code> -
<em>Rene Descartes</em>, a cliche quote ik)</li>
<li>the only thing that separates alive and dead is their conciousness,
their ability to think</li>
<li>he is dying to let others know about what he just discovered, and
force them to think, as it liberated him</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Absurdism Extentialism Nihilism</title>
            <link>https://dhruvsha256.github.io/posts/2022/07/absurdism-extentialism-nihilism/</link>
            <pubDate>Sun, 17 Jul 2022 23:03:04 +0530</pubDate>
            
            <guid>https://dhruvsha256.github.io/posts/2022/07/absurdism-extentialism-nihilism/</guid>
            <description>Nihilism I know that there is no objective meaning outside the illusions we (humans) as a society created. Existentialism As humans, we have freedom to create our own meaning to live. Essence make something what it is a defined purpose a meaning to life an essence, necessary for anything to exist Absurdism Constant tension between the hunger for meaning and impossibility of satisfying this drive in a meaningless world. Stare in this meaninglessness and show middle finger.</description>
            <content type="html"><![CDATA[<h1 id="nihilism">Nihilism</h1>
<ul>
<li>I know that there is no objective meaning outside the illusions we (humans) as a society created.</li>
</ul>
<h1 id="existentialism">Existentialism</h1>
<ul>
<li>As humans, we have freedom to create our own meaning to live.</li>
</ul>
<h2 id="essence">Essence</h2>
<ul>
<li>make something what it is</li>
<li>a defined purpose</li>
<li>a meaning to life</li>
<li>an essence, necessary for anything to exist</li>
</ul>
<h1 id="absurdism">Absurdism</h1>
<ul>
<li>Constant tension between the hunger for meaning and impossibility of satisfying this drive
in a meaningless world.</li>
<li>Stare in this meaninglessness and show middle finger.</li>
<li>A fuck you to nihilism.</li>
<li>Camus says we have three options to face the absurd:
<ul>
<li>Suicide: kill yourself ffs</li>
<li>Philosophical suicide: believe in some meaning
(like religion, Marxism) without killing yourself,
swallow a pill of bullshit basically</li>
<li>Acceptance: rebel, reject hope, embrace nothingness,
don&rsquo;t make happiness a distant goal,
spend time with yourself, be flexible, live with passion,
you are giving away your freedom while you think of suicide,
and choose love &hellip;.</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
