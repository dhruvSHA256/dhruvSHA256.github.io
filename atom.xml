<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://dhruv.fyi/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://dhruv.fyi"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-12-26T00:00:00+00:00</updated>
    <id>https://dhruv.fyi/atom.xml</id>
    <entry xml:lang="en">
        <title>Writing a Dns Resolver from scratch in Haskell</title>
        <published>2023-12-26T00:00:00+00:00</published>
        <updated>2023-12-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/dns-resolver-from-scratch-in-haskell/"/>
        <id>https://dhruv.fyi/posts/dns-resolver-from-scratch-in-haskell/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/dns-resolver-from-scratch-in-haskell/">&lt;h3 id=&quot;what-is-dns-anyway&quot;&gt;What is DNS anyway&lt;&#x2F;h3&gt;
&lt;p&gt;Every device on internet has an ip address associated to it,
which is used to make a connection with it,
but ip addresses doesn’t mean more than random numbers separated by decimal for humans
so we came up with a method to map ip address of these resources to a human readable key&lt;&#x2F;p&gt;
&lt;h3 id=&quot;components-of-dns&quot;&gt;Components of DNS&lt;&#x2F;h3&gt;
&lt;p&gt;Their are three parts to DNS&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Domain name and resource record: This includes the human-readable domain names and corresponding resource records.&lt;&#x2F;li&gt;
&lt;li&gt;Name Servers: These servers store DNS information and respond to DNS queries.&lt;&#x2F;li&gt;
&lt;li&gt;Resolvers: Resolvers, typically part of operating systems or network configurations, initiate DNS queries on behalf of clients.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dns-vs-distributed-kv-stores&quot;&gt;DNS vs. Distributed KV Stores&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Extensibility: DNS supports various data types and query types, making it more adaptable to diverse needs&lt;&#x2F;li&gt;
&lt;li&gt;Bandwidth Efficiency: Unlike distributed databases, DNS reduces unnecessary bandwidth required for adding, updating, and syncing key values.&lt;&#x2F;li&gt;
&lt;li&gt;Network Performance: DNS employs UDP as its underlying protocol, which eliminates the need for a handshake, resulting in faster connections.&lt;&#x2F;li&gt;
&lt;li&gt;Hierarchy: The hierarchical structure of DNS allows for the mapping of multiple resources under a single namespace and different subdomains.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;anatomy-of-a-dns-packet&quot;&gt;Anatomy of a DNS Packet&lt;&#x2F;h3&gt;
&lt;p&gt;DNS uses two types of messages, queries (which we send to name server) and response (which we receive from nameserver), both of them have same format
A DNS packet consist of 5 segments,&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DNS header: Contains metadata with a fixed length of 12 bytes, including flags and counts of records in other sections.&lt;&#x2F;li&gt;
&lt;li&gt;DNS Question: Specifies the query for the name server, including the domain name, query type, and class, can be of variable length&lt;&#x2F;li&gt;
&lt;li&gt;DNS Answer: Resource records providing answers to the query.&lt;&#x2F;li&gt;
&lt;li&gt;Authority Section: Resource records indicating authority for the queried domain.&lt;&#x2F;li&gt;
&lt;li&gt;Additional Section: Resource records holding additional information.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;dns-header&quot;&gt;DNS Header&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;     0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                      ID                       |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                    QDCOUNT                    |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                    ANCOUNT                    |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                    NSCOUNT                    |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                    ARCOUNT                    |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;headers consist of several flags and number of records in other sections
QR, if the packet is a query (0) or response (1)
OPCODE can be standard query (0), inverse query (1), or server status request (2)
AA, if DNS server is authoritative for the queried host
TC, if message is truncated due to excessive length or not
RD, if query is a recursive query
RA, if nameserver supports recursive query or not
Z is reserved for future use
RCODE indicates the response code like no error (0), format error (1), server fail (2), domain does not exist (3), etc&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dns-question&quot;&gt;DNS Question&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                     QNAME                     |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                     QTYPE                     |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;   |                     QCLASS                    |
&lt;&#x2F;span&gt;&lt;span&gt;   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;QNAME,  name of requested resources
QTYPE, types of question, A for IPv4 address, AAAA for IPv6 address, MX for mail exchange, CNAME for canonical name etc, our DNS resolver currently supports A record
QCLASS, the class of query being made like internet (1, most widely used), chaos (3, rarely used) and hesiod (4, also rarely used)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dns-resource-record&quot;&gt;DNS Resource Record&lt;&#x2F;h4&gt;
&lt;p&gt;Each record has a type, expiration date and type specific data&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;  |                      NAME                     |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;  |                      TYPE                     |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;  |                     CLASS                     |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;  |                      TTL                      |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;span&gt;  |                    RDLENGTH                   |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
&lt;&#x2F;span&gt;&lt;span&gt;  |                    RDATA                      |
&lt;&#x2F;span&gt;&lt;span&gt;  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NAME, domain name belonging to resource record
TYPE, type of resource record similar to type of question
CLASS, class of data similar to class of question
TTL, time to live
RDLENGTH, length of data in RR
RDATA, contains specific data associated with type of RR, for A record it will contain IPv4 address&lt;&#x2F;p&gt;
&lt;h3 id=&quot;communicating-with-a-nameserver&quot;&gt;Communicating with a Nameserver&lt;&#x2F;h3&gt;
&lt;p&gt;Their are a couple of steps we need for implementing any network protocol like,&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;whether to use TCP or UDP, on which port we need to send request or listen to&lt;&#x2F;li&gt;
&lt;li&gt;represent the packet format described for that protocol in the language we are using&lt;&#x2F;li&gt;
&lt;li&gt;construction the request and send it to server&lt;&#x2F;li&gt;
&lt;li&gt;receiving and processing the response
we will tackle these one by one&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;dns-protocol-specs&quot;&gt;DNS protocol specs&lt;&#x2F;h4&gt;
&lt;p&gt;So the DNS runs on port 53 and uses UDP as a transport protocol,
which is not as reliable as TCP and we might encounter packet loss.
But why do DNS chooses to use UDP instead ?
The answer is simple, Cost to establish connection.
One of the things that makes TCP reliable is a 3 way handshake and it makes TCP connection establishment slower as compared to UDP.
It is not acceptable for DNS resolver to do a handshake with nameserver for every fresh query.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;representing-the-dns-packet&quot;&gt;Representing the DNS packet&lt;&#x2F;h4&gt;
&lt;p&gt;We can easily represent DNS header, question, resource record and the complete DNS packet
using custom data types in haskell like shown below&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hs&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-hs &quot;&gt;&lt;code class=&quot;language-hs&quot; data-lang=&quot;hs&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span&gt;Data.ByteString.Char8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;BS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Data.Word (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSHeader &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSHeader
&lt;&#x2F;span&gt;&lt;span&gt;  { dnsHeaderId :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsHeaderFlags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;-- QR OPCODE AA TC RD RA Z RCODE
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsHeaderNumQuestion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsHeaderNumAnswer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsHeaderNumAuthority &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsHeaderNumAdditional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSQuestion &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSQuestion
&lt;&#x2F;span&gt;&lt;span&gt;  { dnsQuestionName :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsQuestionType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsQuestionClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSRecord &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSRecord
&lt;&#x2F;span&gt;&lt;span&gt;  { dnsRecordName :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsRecordType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsRecordClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsRecordTtl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsRecordData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSPacket &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSPacket
&lt;&#x2F;span&gt;&lt;span&gt;  { dnsPacketHeader :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSHeader&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsPacketQuestions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSQuestion&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsPacketAnswers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsPacketAuthorities &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dnsPacketAdditionals &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;construct-the-request-and-sending-to-server&quot;&gt;Construct the request and sending to server&lt;&#x2F;h4&gt;
&lt;p&gt;So a DNS query consist of the domain name we want to resolve and the query type
for example we want to resolve IPv4 address for google.com which is a type A query
we’ll use a helper function to create a DNS packet for our query&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;encodeQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: String -&amp;gt; Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16 -&amp;gt; IO BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span&gt;encodeQuery domainName recordType = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      recursionDesired = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Bits&lt;&#x2F;span&gt;&lt;span&gt;.shiftL` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;      header = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSHeader&lt;&#x2F;span&gt;&lt;span&gt; _id recursionDesired &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1 0 0 0
&lt;&#x2F;span&gt;&lt;span&gt;      question = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSQuestion&lt;&#x2F;span&gt;&lt;span&gt; (encodeDNSName domainName) recordType classIn
&lt;&#x2F;span&gt;&lt;span&gt;      queryBytes = headerToBytes header &amp;lt;&amp;gt; questionToBytes question
&lt;&#x2F;span&gt;&lt;span&gt;  return queryBytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the above function will return a bytestring of DNS packet which we will send to the nameserver&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decoding-and-processing-the-response&quot;&gt;Decoding and Processing the response&lt;&#x2F;h3&gt;
&lt;p&gt;We will receive a DNS packet in bytestring form from the nameserver which may contain
the actual answer we are looking for, we just need to decode and process it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;decodeQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Either String DNSPacket
&lt;&#x2F;span&gt;&lt;span&gt;decodeQuery bs =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; runGetOrFail (getDNSPacket bs) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;LBS&lt;&#x2F;span&gt;&lt;span&gt;.fromStrict bs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span&gt; (_, _, err) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span&gt; err
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt; (_, _, dnsPacket) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt; dnsPacket
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDNSPacket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Get DNSPacket
&lt;&#x2F;span&gt;&lt;span&gt;getDNSPacket input = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  header &amp;lt;- getDNSHeader
&lt;&#x2F;span&gt;&lt;span&gt;  questions &amp;lt;- getDNSQuestionNE input (dnsHeaderNumQuestion header)
&lt;&#x2F;span&gt;&lt;span&gt;  answers &amp;lt;- getDNSRecordList input (dnsHeaderNumAnswer header)
&lt;&#x2F;span&gt;&lt;span&gt;  authorities &amp;lt;- getDNSRecordList input (dnsHeaderNumAuthority header)
&lt;&#x2F;span&gt;&lt;span&gt;  additionals &amp;lt;- getDNSRecordList input (dnsHeaderNumAdditional header)
&lt;&#x2F;span&gt;&lt;span&gt;  return $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSPacket&lt;&#x2F;span&gt;&lt;span&gt; header questions answers authorities additionals
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDNSHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Get DNSHeader
&lt;&#x2F;span&gt;&lt;span&gt;getDNSHeader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSHeader &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDNSQuestionNE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Word16 -&amp;gt; Get&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSQuestion&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;getDNSQuestionNE input x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  replicateM (fromIntegral x) getDNSQuestion
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDNSQuestion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Get DNSQuestion
&lt;&#x2F;span&gt;&lt;span&gt;    getDNSQuestion = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;DNSQuestion &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$&amp;gt; getDomainName input &amp;lt;*&amp;gt; getWord16be &amp;lt;*&amp;gt; getWord16be
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDNSRecordList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Word16 -&amp;gt; Get&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;getDNSRecordList input count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  replicateM (fromIntegral count) getDNSRecord
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    getDNSRecord = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      domain &amp;lt;- getDomainName input
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;lt;- getWord16be
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getWord16be
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ttl&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getWord32be
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;data_len&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getInt16be
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;data_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getRecordData&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fromIntegral type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fromIntegral data_len&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt; {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnsRecordName&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;domain&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnsRecordType&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnsRecordClass&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnsRecordTtl&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ttl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnsRecordData&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;data_&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getRecordData&lt;&#x2F;span&gt;&lt;span&gt; :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;16 -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Get BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getRecordData type_ data_len
&lt;&#x2F;span&gt;&lt;span&gt;      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;type_&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;typeNs&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getDomainName input
&lt;&#x2F;span&gt;&lt;span&gt;      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;type_&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;typeA&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ipBytes&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getByteString&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fromIntegral data_len
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ipToString&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unpack ipBytes
&lt;&#x2F;span&gt;&lt;span&gt;      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;otherwise&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getByteString&lt;&#x2F;span&gt;&lt;span&gt; $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fromIntegral data_len
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ipToString&lt;&#x2F;span&gt;&lt;span&gt; :: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;8] -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ipToString&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;intercalate&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;.&amp;quot; . &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;map show
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the decoding most of the fields are straightforward but,
DNS uses domain name compression for space optimization,
for example if we query for domain “google.com”, the string “google.com” will be present
multiple times in the DNS packet.
Instead of storing it multiple times what DNS do is it stores the pointer to that string
present previously. So we also need to take this compression in account while decoding
domain name.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getDomainName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Get BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span&gt;getDomainName input&amp;#39; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  len &amp;lt;- getInt8
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lengthValue = len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Bits&lt;&#x2F;span&gt;&lt;span&gt;..&amp;amp;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;63
&lt;&#x2F;span&gt;&lt;span&gt;  getDomainName&amp;#39; input&amp;#39; len lengthValue
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    getDomainName&amp;#39; input len lengthValue
&lt;&#x2F;span&gt;&lt;span&gt;      | len == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.empty
&lt;&#x2F;span&gt;&lt;span&gt;      | isPointer len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          d &amp;lt;- getInt8
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset = fromIntegral $ lengthValue * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;256 &lt;&#x2F;span&gt;&lt;span&gt;+ fromIntegral d &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;-- converting bits to int
&lt;&#x2F;span&gt;&lt;span&gt;          decodeCompressed offset input
&lt;&#x2F;span&gt;&lt;span&gt;      | otherwise = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          label &amp;lt;- getByteString $ fromIntegral lengthValue
&lt;&#x2F;span&gt;&lt;span&gt;          rest &amp;lt;- getDomainName input
&lt;&#x2F;span&gt;&lt;span&gt;          return $
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.null rest
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt; label
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; label &amp;lt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt; rest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;decodeCompressed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Int -&amp;gt; BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString -&amp;gt; Get BS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span&gt;    decodeCompressed offset input = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.drop offset input
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; runGetOrFail (getDomainName input) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;LBS&lt;&#x2F;span&gt;&lt;span&gt;.fromStrict msg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span&gt; (_, _, err) -&amp;gt; traceShow (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;err: &amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;++ show err) $ return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.empty
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt; (_, _, domain) -&amp;gt; return domain
&lt;&#x2F;span&gt;&lt;span&gt;    isPointer c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Bits&lt;&#x2F;span&gt;&lt;span&gt;.testBit c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Bits&lt;&#x2F;span&gt;&lt;span&gt;.testBit c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;if the two MSB are set, then it indicates that remaining 14 bits represents pointer to the domain name backwards&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recursive-nature-of-dns&quot;&gt;Recursive Nature of DNS&lt;&#x2F;h3&gt;
&lt;p&gt;See it is not the case that every time we query for a domain name, nameserver will respond with its ip.
DNS resolution can involve multiple steps, as it may recursively query different name servers until it obtains the desired information.
It can we possible that it may return ip of another nameserver which many have the
answer or even the domain name of that nameserver, so our resolve function will look like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;matchRecordType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: Word16 -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; Maybe String
&lt;&#x2F;span&gt;&lt;span&gt;matchRecordType recordType records = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matchingRecord = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;.find (\x -&amp;gt; dnsRecordType x == recordType) records
&lt;&#x2F;span&gt;&lt;span&gt;  (\x -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;BS&lt;&#x2F;span&gt;&lt;span&gt;.unpack $ dnsRecordData x)) =&amp;lt;&amp;lt; matchingRecord
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getAnswer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; Maybe String
&lt;&#x2F;span&gt;&lt;span&gt;getAnswer = matchRecordType typeA
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getNsIp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; Maybe String
&lt;&#x2F;span&gt;&lt;span&gt;getNsIp = matchRecordType typeA
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;getNs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;DNSRecord&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; Maybe String
&lt;&#x2F;span&gt;&lt;span&gt;getNs = matchRecordType typeNs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;resolve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;:: String -&amp;gt; Data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Word16 -&amp;gt; String -&amp;gt; IO&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Maybe String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;resolve domainName recordType nameserver = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  query &amp;lt;- encodeQuery domainName recordType
&lt;&#x2F;span&gt;&lt;span&gt;  byteString &amp;lt;- sendUDPRequest nameserver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt; query
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; decodeQuery byteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span&gt; err -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      traceShow (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Error parsing DNS packet: &amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;++ err) (return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt; packet -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mIp = getAnswer $ dnsPacketAnswers packet
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mNsIp = getNsIp $ dnsPacketAdditionals packet
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mNsDomain = getNs $ dnsPacketAuthorities packet
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; (mIp, mNsIp, mNsDomain) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; ip, _, _) -&amp;gt; return $ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; ip
&lt;&#x2F;span&gt;&lt;span&gt;        (_, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; nsIp, _) -&amp;gt; resolve domainName recordType nsIp
&lt;&#x2F;span&gt;&lt;span&gt;        (_, _, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span&gt; nsDomain) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;          nameserver &amp;lt;- resolve nsDomain typeA nameserver
&lt;&#x2F;span&gt;&lt;span&gt;          resolve domainName recordType $ fromMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; nameserver
&lt;&#x2F;span&gt;&lt;span&gt;        (_, _, _) -&amp;gt; traceShow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Error Occured&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;$ return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;Nothing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;final-step-testing&quot;&gt;Final Step (testing)&lt;&#x2F;h3&gt;
&lt;p&gt;Our poorman’s DNS resolver is finally completed now,
you can test it by querying any domain name.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&amp;gt; cabal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt; haskell-dns-resolver google.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;142.251.42.78&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; dig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;@8.8.8.8&lt;&#x2F;span&gt;&lt;span&gt; google.com
&lt;&#x2F;span&gt;&lt;span&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;9.10.6 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt; @8.8.8.8 google.com
&lt;&#x2F;span&gt;&lt;span&gt;; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; server found)
&lt;&#x2F;span&gt;&lt;span&gt;;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span&gt; options: +cmd
&lt;&#x2F;span&gt;&lt;span&gt;;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Got&lt;&#x2F;span&gt;&lt;span&gt; answer:
&lt;&#x2F;span&gt;&lt;span&gt;;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;opcode&lt;&#x2F;span&gt;&lt;span&gt;: QUERY, status: NOERROR, id: 5539
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; OPT PSEUDOSECTION:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;; EDNS: version: 0, flags:; udp: 512
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; QUESTION SECTION:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;google.com.                    IN      A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; ANSWER SECTION:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;google.com.             227     IN      A       142.250.70.78
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; Query time: 49 msec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; SERVER: 8.8.8.8#53(8.8.8.8)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; WHEN: Mon Mar 18 19:17:16 IST 2024
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;;; MSG SIZE  rcvd: 55
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc1034&quot;&gt;RFC 1034 - Domain names - concepts and facilities&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc1035&quot;&gt;RFC 1035 - Domain names - implementation and specification&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;implement-dns.wizardzines.com&#x2F;&quot;&gt;Implement DNS in a weekend&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruvSHA256&#x2F;haskell-dns-resolver&quot;&gt;dhruvSHA256&#x2F;haskell-dns-resolver&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Network Load balancer from scratch in Python</title>
        <published>2023-11-07T00:00:00+00:00</published>
        <updated>2023-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/load-balancer-python/"/>
        <id>https://dhruv.fyi/posts/load-balancer-python/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/load-balancer-python/">&lt;p&gt;Have you ever wondered how web applications handle increasing traffic? As a software engineer, you might have heard of load balancers,&lt;br &#x2F;&gt;
which play a crucial role in managing the distribution of requests to multiple servers.&lt;&#x2F;p&gt;
&lt;p&gt;This weekend, I decided to dive deep into socket programming and create a simple yet functional a load balancer from scratch in Python.
In this blog post, I’ll walk you through the process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-a-load-balancer-anyway&quot;&gt;What is a Load Balancer anyway ?&lt;&#x2F;h3&gt;
&lt;p&gt;What is a load balancer anyway you may ask.
Imagine you’ve built your own onlyfans clone, and it’s gaining traction.&lt;&#x2F;p&gt;
&lt;p&gt;To handle the increased traffic, you can’t infinitely scale your single server vertically.
Instead, you buy multiple servers and host your site across them.&lt;&#x2F;p&gt;
&lt;p&gt;However, a new problem arises: how do you effectively utilize the resources of all these servers? The answer is a load balancer.
It distributes incoming requests to different servers based on a selection criteria, like a simple round-robin algorithm.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layer-4-vs-layer-7-load-balancers&quot;&gt;Layer 4 vs. Layer 7 Load Balancers&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A layer 7 load balancer works on you guessed it right, layer 7 of OSI model which is the
application layer, so for every incoming request, it do multiple things like eliminating
TLS, based on the data received redirect it to a specific server.&lt;&#x2F;p&gt;
&lt;p&gt;The whole flow goes like this: client -&amp;gt; load balancer (decodes request) -&amp;gt; server
Loadbalancer essentially creates a new request to server.
All the data in request body is accessible to it. So we can say it can do things a
little smartly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant Client
    participant LoadBalancer
    participant Server
    Client-&gt;&gt;LoadBalancer: Request R1
    LoadBalancer-&gt;&gt;Server: Request R2
    Server-&gt;&gt;LoadBalancer: Response R1
    LoadBalancer-&gt;&gt;Client: Response R2
&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;A layer 4 load balancer on the other hand works on (you guess), which is Transport Layer of OSI model.
It instead of decoding the request, directly sends the packet to server.
It basically act as a relay between client and server, which is faster but … dumb.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s dive into the code to build our Layer 4 load balancer.
The first step is to listen to an address and receive data from clients.
We will be using Python’s socket library for this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    sock = socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span&gt;(socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AF_INET&lt;&#x2F;span&gt;&lt;span&gt;, socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;SOCK_STREAM&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HOST&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Listening on port: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            client_conn, client_addr = sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;client_conn:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Connected by &lt;&#x2F;span&gt;&lt;span&gt;{client_addr}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                data = client_conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we are receiving connections from clients,
we need to somehow relay requests and responses between them.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;forward_request&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;destination&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Sending data from &lt;&#x2F;span&gt;&lt;span&gt;{source.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getsockname&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span&gt;{destination.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getsockname&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                data = source.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(data) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;                destination.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(data)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            source.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            destination.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will be needing two separate threads for this (one for receiving client request and
sending it to server, and one receiving server response and sending it to client)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    c2b_thread = threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=forward_request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;=(client_conn, backend_conn))
&lt;&#x2F;span&gt;&lt;span&gt;    b2c_thread = threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=forward_request, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;=(backend_conn, client_conn))
&lt;&#x2F;span&gt;&lt;span&gt;    c2b_thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    b2c_thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    c2b_thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    b2c_thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now comes the tricky part: what if one server dies? It would be foolish to relay requests to a dead server.&lt;br &#x2F;&gt;
We need a heartbeat mechanism to periodically check if the server is up and running.
If it isn’t, we should exclude it from our pool of servers.
We must perform this operation without blocking our primary server, so we’ll create a separate thread for it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;get_server_heart_beat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            resp = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{server.host}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{server.port}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;health&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;resp.text == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;up&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;update_heartbeat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            server_heart_beat = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_server_heart_beat&lt;&#x2F;span&gt;&lt;span&gt;(server)
&lt;&#x2F;span&gt;&lt;span&gt;            server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;update_health_status&lt;&#x2F;span&gt;&lt;span&gt;(server_heart_beat)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(delay)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;check_health&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;servers&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        threads = []
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;servers:
&lt;&#x2F;span&gt;&lt;span&gt;            t = threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=update_heartbeat, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;=(s, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            threads.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(t)
&lt;&#x2F;span&gt;&lt;span&gt;            t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;threads
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are almost done just need to test our load balancer.
&lt;img src=&quot;&#x2F;media&#x2F;load-balancer-test.gif&quot; alt=&quot;xyx&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Full code can be found on my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruvSHA256&#x2F;load-balancer&quot;&gt;github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Solid Principles in Python</title>
        <published>2023-05-02T00:00:00+00:00</published>
        <updated>2023-05-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/solid-principles/"/>
        <id>https://dhruv.fyi/posts/solid-principles/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/solid-principles/">&lt;p&gt;S - Single Responsibility Principle
&lt;br&gt;
O - Open&#x2F;Closed Principle
&lt;br&gt;
L - Liskov Substitution Principle
&lt;br&gt;
I - Interface Segmented Principle
&lt;br&gt;
D - Dependency Inversion Principle
&lt;br&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;single-responsiblity&quot;&gt;Single Responsiblity:&lt;&#x2F;h3&gt;
&lt;p&gt;any module should be changed by only one actor
dont put multiple functionalities in single module&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;PasswordHasher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashAndSavePassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(password)
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;savePassword&lt;&#x2F;span&gt;&lt;span&gt;(password)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;haashing &lt;&#x2F;span&gt;&lt;span&gt;{password}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;savePassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;saving &lt;&#x2F;span&gt;&lt;span&gt;{password}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;for example in above code snippet the class &lt;code&gt;PasswordHasher&lt;&#x2F;code&gt; is doing two independent
operations, and the actor that can change its implementation can be security team
which can change hashing implementation or data team which may change how passwords
are stored, this doesnt follow single responsiblity principle
Both functionalities should be seperated&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;PasswordHasher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hashing &lt;&#x2F;span&gt;&lt;span&gt;{password}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;PasswordStorage&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;savePassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;passwordHash&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;saving &lt;&#x2F;span&gt;&lt;span&gt;{passwordHash}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;open-close&quot;&gt;Open Close:&lt;&#x2F;h3&gt;
&lt;p&gt;open for extension but closed for modification&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;HashingType&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;PasswordHasher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hashingType&lt;&#x2F;span&gt;&lt;span&gt;: HashingType):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password = password
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType = hashingType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;base64&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with bas64
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;sha256&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with sha256
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;md5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with md5
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;in above code snippet, if we need to add one more hashing type, we need to modify the
&lt;code&gt;PasswordHasher&lt;&#x2F;code&gt; class which voilates the Open Close principle.
We should make the &lt;code&gt;HashingType&lt;&#x2F;code&gt; class more extensible&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;IHashingType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;metaclass&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;ABCMeta&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;abstractmethod
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Base64Hashing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IHashingType&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with bas64
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Md5Hashing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IHashingType&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with md5
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;SHA256Hashing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IHashingType&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# hash password with sha256
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;PasswordHasher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hashingType&lt;&#x2F;span&gt;&lt;span&gt;: IHashingType):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password = password
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType = hashingType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hashingType.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hashPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way we just need to add another class for different hashing type&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liskov-substution&quot;&gt;Liskov Substution:&lt;&#x2F;h3&gt;
&lt;p&gt;if their is f(x) for some object x of class A
then their should be f(y) for some object y of class B if B inherits A
if class CitrusFruit inherit class Fruit
then eat(fruit) should support both, orange of CitrusFruit and banana of Fruit
function should take argument of both base class and derived class and should not break&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CitrusFruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fruit&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(fruit, CitrusFruit):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Eating citrus fruit: &lt;&#x2F;span&gt;&lt;span&gt;{fruit.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(fruit, Fruit):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Eating fruit: &lt;&#x2F;span&gt;&lt;span&gt;{fruit.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    banana = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;banana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    orange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;CitrusFruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;orange&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(banana)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(orange)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;here the behaviour of &lt;code&gt;eat()&lt;&#x2F;code&gt; changes with the type of object it is passed which doest
follow liskov substitution principle&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Eating fruit: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CitrusFruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Eating citrus fruit: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fruit&lt;&#x2F;span&gt;&lt;span&gt;: Fruit):
&lt;&#x2F;span&gt;&lt;span&gt;      fruit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  banana = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;banana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  orange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;CitrusFruit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;orange&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(banana)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span&gt;(orange)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now &lt;code&gt;eat()&lt;&#x2F;code&gt; behaves same for &lt;code&gt;Fruit&lt;&#x2F;code&gt; or its subclass &lt;code&gt;CitrusFruit&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;interface-segregation&quot;&gt;Interface Segregation:&lt;&#x2F;h3&gt;
&lt;p&gt;design multiple smaller interfaces&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;abc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ABCMeta, abstractmethod
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;IShape&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;metaclass&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;ABCMeta&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;abstractmethod
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;NotImplementedError
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Circle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IShape&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Square&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IShape&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Rectangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IShape&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dependency-inversion&quot;&gt;Dependency Inversion:&lt;&#x2F;h3&gt;
&lt;p&gt;high level module should not depend on low level module
both should depend on abstraction
abstraction should not depend on implementation
implementation shouldnt depend on abstraction
ex: store class has a fn makePayment which makes payment
instead of initializing a class StripePayment in it
make a interface HandlePayment, StripePayment and Paypalpayment both extends it
not pass any object of HandlePayment interface in makePayment fn&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;StripePayment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;makeStripePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            stripePayment = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;StripePayment&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            stripePayment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the fn &lt;code&gt;makeStripePayment()&lt;&#x2F;code&gt; initializes the object of &lt;code&gt;StripePayment&lt;&#x2F;code&gt; in its implementation
suppose we need to test it using Mock payment api, then we it would be hard for us as we need to change the implementation of fn just to test.
so instead of initializing payment object and depending on its concreat
implementation we should depend on an interface instead (which will be implemented by
StripePayment class) and take that as an argument&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;IPayment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;StripePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;IPayment&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;making payment using stripe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;paymentObj&lt;&#x2F;span&gt;&lt;span&gt;: IPayment):
&lt;&#x2F;span&gt;&lt;span&gt;          paymentObj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  store = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  stripePayment = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;StripePayment&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  store.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;makePayment&lt;&#x2F;span&gt;&lt;span&gt;(stripePayment)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Postgresql Indexes</title>
        <published>2022-12-19T00:00:00+00:00</published>
        <updated>2022-12-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/postgresql-indexes/"/>
        <id>https://dhruv.fyi/posts/postgresql-indexes/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/postgresql-indexes/">&lt;h2 id=&quot;indexes&quot;&gt;Indexes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what&quot;&gt;What&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;a data structure, can make some queries fast&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;why&quot;&gt;Why&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;cause, without index every query will be a sequential scan from disk&lt;&#x2F;li&gt;
&lt;li&gt;whole point of index is to make query faster than O(n)&lt;&#x2F;li&gt;
&lt;li&gt;so why not create an index for each type of query, cause indexes makes updating slow as we have to update indexes&lt;&#x2F;li&gt;
&lt;li&gt;it also increases disk usage, slows down backup and restore&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;single-column-index&quot;&gt;Single Column Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;index made on a single attribute&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;multi-column-index&quot;&gt;Multi Column Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;index made on a group of attribute&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;partial-index&quot;&gt;Partial Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;index made on a subset of table&lt;&#x2F;li&gt;
&lt;li&gt;ex: index on all the incomplete appointments in appointments table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;b-tree-index&quot;&gt;B+ Tree Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;uses B+ Tree for creating indexes&lt;&#x2F;li&gt;
&lt;li&gt;default in postgresql&lt;&#x2F;li&gt;
&lt;li&gt;stores pointer to heap file and not actual data&lt;&#x2F;li&gt;
&lt;li&gt;better to store actual data for primary index as reading from heap file is another disk i&#x2F;o&lt;&#x2F;li&gt;
&lt;li&gt;used for query with operations like &amp;lt;, &amp;lt;= , = ,&amp;gt;=,&amp;gt;&lt;&#x2F;li&gt;
&lt;li&gt;can be used for range queries, first go to the start of range in O(log(n)) and then traverse to next node&lt;&#x2F;li&gt;
&lt;li&gt;can be used for patterns like ^foo or foo% (constant prefix) but not with %foo as BTree are sorted based on first char&lt;&#x2F;li&gt;
&lt;li&gt;not suitable for large values of key as btree copies the key value in nodes -&amp;gt; less keys per node -&amp;gt; tree with more depth&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hash-index&quot;&gt;Hash Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;uses hash table instead of btree&lt;&#x2F;li&gt;
&lt;li&gt;PostgreSQL’s hash function maps any database value to a 32-bit integer, the hash code (about 4 billion possible hash codes)&lt;&#x2F;li&gt;
&lt;li&gt;hashfunction(index attribute) -&amp;gt; bucket which contains pointer to the rows -&amp;gt; actual data in table&lt;&#x2F;li&gt;
&lt;li&gt;can be smaller in size than btree&lt;&#x2F;li&gt;
&lt;li&gt;Hash index select and insert performance can be better than a B-Tree index&lt;&#x2F;li&gt;
&lt;li&gt;suitable for update heavy queries which uses equality operator&lt;&#x2F;li&gt;
&lt;li&gt;should be used with equality operator and not with comparative operators, example &lt;code&gt;select * from table where key = &#x27;hello&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;suitable for large values as their too are converted to 32 bit int values&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;brin-index&quot;&gt;BRIN Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Block range index&lt;&#x2F;li&gt;
&lt;li&gt;A block range is a group of pages that are physically adjacent in the table; for each block range, some summary info is stored by the index&lt;&#x2F;li&gt;
&lt;li&gt;ex: a table storing a ZIP code column might have all codes for a city grouped together naturally.&lt;&#x2F;li&gt;
&lt;li&gt;When you set up a BRIN index, PostgreSQL reads your selected column’s maximum and minimum values for each 8k page of stored data. PostgreSQL then stores just 3 pieces of information into the BRIN index, the page number, the minimum value and the maximum value for your chosen column.&lt;&#x2F;li&gt;
&lt;li&gt;more suitable for read heavy data, which is not updated frequently as updating can mess up ranges&lt;&#x2F;li&gt;
&lt;li&gt;used for very large datasets where the data we are searching is in blocks, like timestamps and date ranges.&lt;&#x2F;li&gt;
&lt;li&gt;size of index is very small&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gin-index&quot;&gt;GIN Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Generalized inverted index&lt;&#x2F;li&gt;
&lt;li&gt;used where we need to index composite value&lt;&#x2F;li&gt;
&lt;li&gt;used for jsonb and array and tsvector (full text search)&lt;&#x2F;li&gt;
&lt;li&gt;organizes keys (like normalized words) into btree&lt;&#x2F;li&gt;
&lt;li&gt;node of btree contains lexmins and these lexmins points to the tuple id they exist in&lt;&#x2F;li&gt;
&lt;li&gt;supports query with operators:
&lt;ul&gt;
&lt;li&gt;@&amp;gt; (contains)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;@ (contained)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;&amp;amp; (overlap)&lt;&#x2F;li&gt;
&lt;li&gt;|| (concat)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gist-index&quot;&gt;GiST Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;generalized search tree&lt;&#x2F;li&gt;
&lt;li&gt;a framework, not a single index&lt;&#x2F;li&gt;
&lt;li&gt;used for spatial data and geometrical data&lt;&#x2F;li&gt;
&lt;li&gt;postgresql includes GiST operator classes for several 2D geometric data types&lt;&#x2F;li&gt;
&lt;li&gt;capable of optimizing nearest neighbour searches&lt;&#x2F;li&gt;
&lt;li&gt;supports query with operators:
&lt;ul&gt;
&lt;li&gt;&amp;lt;&amp;lt; (left side)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;&amp;lt; (not exceed to right)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;&amp;gt; (not exceed to left)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;gt;&amp;gt; (right side)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;&amp;lt;| (below)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;&amp;lt;| (not exceed above)&lt;&#x2F;li&gt;
&lt;li&gt;|&amp;amp;&amp;gt; (not exceed below)&lt;&#x2F;li&gt;
&lt;li&gt;|&amp;gt;&amp;gt; (above)&lt;&#x2F;li&gt;
&lt;li&gt;@&amp;gt; (contains)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;@ (contained)&lt;&#x2F;li&gt;
&lt;li&gt;~= (same)&lt;&#x2F;li&gt;
&lt;li&gt;&amp;amp;&amp;amp;  (overlap)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bloom-index&quot;&gt;Bloom Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;sort of like hash but different&lt;&#x2F;li&gt;
&lt;li&gt;uses Bloom Filters&lt;&#x2F;li&gt;
&lt;li&gt;used for multicolumn indexing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>On God</title>
        <published>2022-09-25T00:00:00+00:00</published>
        <updated>2022-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/private/on-god/"/>
        <id>https://dhruv.fyi/private/on-god/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/private/on-god/">&lt;h2 id=&quot;randomness-and-uncertainity&quot;&gt;Randomness and Uncertainity&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;nothing is certain in this world and everything is random&lt;&#x2F;li&gt;
&lt;li&gt;from the place of your birth to the friends and presence of your loved ones in your life,&lt;&#x2F;li&gt;
&lt;li&gt;well everything is not reandom but pseudorandom as their is always a reason for something to happen but we are too lazy to find that reason and praise or blame god for that&lt;&#x2F;li&gt;
&lt;li&gt;for example, I got late for college and then took the bench I took, which let me interact with the friends we now have, dictating my life&lt;&#x2F;li&gt;
&lt;li&gt;things can go to completely different direction, if I just took a day off of college that day, of arrive early and choose to sit on a different bench, or simply not talk to them or they dont talk to me.&lt;&#x2F;li&gt;
&lt;li&gt;hence no matter how hard you try, their is a presence of pseudorandomness dictating the course of your life&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-is-god&quot;&gt;What is god&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;a image of a creator who created the world, and now controls it&lt;&#x2F;li&gt;
&lt;li&gt;people believe that when we worship god he&#x2F;she may grant our wish and when we do bad stuff god will punish us&lt;&#x2F;li&gt;
&lt;li&gt;it is a coping mechanism to deal with hardship and meaninglessness of life, I mean life will get a lot easire when you thing God will stop this suffering in your life and is just testing you&lt;&#x2F;li&gt;
&lt;li&gt;god is man made according to me,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-we-created-religion-and-god&quot;&gt;Why we created religion and God&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;life is meaningless , we born to die, and we as a species are afraid of our death and also uncertainity of something&lt;&#x2F;li&gt;
&lt;li&gt;humans have developed prefrontal cortex unlike our ancestors, and also humans have religion&lt;&#x2F;li&gt;
&lt;li&gt;religion is created to provide a framework to live your life, when we are not that developed as a society,&lt;&#x2F;li&gt;
&lt;li&gt;religion help us not think about our death and console us about the after life we will get,&lt;&#x2F;li&gt;
&lt;li&gt;religion also make us believe that the people we actually care are not dead, they are in a better place and we will meet them when we die, this is plain bullshit&lt;&#x2F;li&gt;
&lt;li&gt;it easier for peopel to not kill other people in fear of spending their afterlife in hell than to understand concept like morality&lt;&#x2F;li&gt;
&lt;li&gt;morality can exist without god, as morality is just our instinct of altruism which we get after we evolved&lt;&#x2F;li&gt;
&lt;li&gt;The presence of God acts like the carrot and the stick for human beings, making them exist in a complex society with other people&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-is-religion-started&quot;&gt;How is religion started&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;iqBh7G4uDR8?t=1627&quot;&gt;Diana Walsh Pasulka: Aliens, Technology, Religion &amp;amp; the Nature of Belief | Lex Fridman Podcast #149 - YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;religion is not a myth, but god is&lt;&#x2F;li&gt;
&lt;li&gt;people have some experiences, they label them as religions or mystic experiences&lt;&#x2F;li&gt;
&lt;li&gt;they talk about it to other people, and influence them, and something gets written about it&lt;&#x2F;li&gt;
&lt;li&gt;people become affected by it, and when too many people are affected by it, a institution steps in and tries to control the narrative&lt;&#x2F;li&gt;
&lt;li&gt;that institution wants power and control over others&lt;&#x2F;li&gt;
&lt;li&gt;also in hinduism, every god is a representation of human with fixed set of characters, shows god is created by humans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-we-need-god&quot;&gt;Why we need God&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;god is a multipurpos tools&lt;&#x2F;li&gt;
&lt;li&gt;we pray to god to grant our wishes
&lt;ul&gt;
&lt;li&gt;but we know that this wont work so we actually work to fullfill our wishes, and those who dont work simply blame god&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;we pray to god before doing something important
&lt;ul&gt;
&lt;li&gt;it acts as positive reinforcement, like when I have my dad looking over me in a competition, I will perform well, or when I write exam with my &lt;em&gt;lucky&lt;&#x2F;em&gt; pen I will score good,&lt;&#x2F;li&gt;
&lt;li&gt;these are just manmade believes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;we thank god for something good happening in our life
&lt;ul&gt;
&lt;li&gt;we cat completely get to know that why some good thing happened in our life, but we are greateful to that so we wanted to thank someone for this&lt;&#x2F;li&gt;
&lt;li&gt;we cant thank some person who is not responsible for this so we thank God&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;we ask god why is something bad happened in our life
&lt;ul&gt;
&lt;li&gt;we think we dont deserve suffering in life as we pray to god&lt;&#x2F;li&gt;
&lt;li&gt;the things you get in life depends on not only you but several other factors, like your environment, your &lt;em&gt;luck&lt;&#x2F;em&gt; etc&lt;&#x2F;li&gt;
&lt;li&gt;and when things doesnt turn out well, we instead of finding the real reason, blame god&lt;&#x2F;li&gt;
&lt;li&gt;but some people think that this is just God taking their test, that is just bullshit, they are just consoling themselves that this will be over soon, but they know that their will be no ending to this suffering when they dont do something to change it themselves&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-humans-greed-of-power-corrupted-religion&quot;&gt;How Humans’ greed of power corrupted religion&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;the desire of power and social status is inherited into us&lt;&#x2F;li&gt;
&lt;li&gt;human greed for power made something so beautiful like religion, a shit&lt;&#x2F;li&gt;
&lt;li&gt;like if their are 2 bhramans in a village, they have the necessary knowledge&lt;&#x2F;li&gt;
&lt;li&gt;they can spread this knowledge to make a whole village of bhramans but they choose not to do so as increase in number of bhramans decreases their demand&lt;&#x2F;li&gt;
&lt;li&gt;in some religions we have to follow some rituals to be the part of that religion, that is just like the proof of work in bitcoin that we have to show to get validated to mine block in the block chain&lt;&#x2F;li&gt;
&lt;li&gt;however some rituals may be good for us&lt;&#x2F;li&gt;
&lt;li&gt;religion does not evolves, and so does rituals, like it is easier to sacrifise a bull, in old times but now its just not practical, same goes with wasting milk over lord shiva, but when someone tries to change that and to evolve the religion, they become the target of peoples hatred&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;religion-and-afterlife&quot;&gt;Religion and Afterlife&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;religion allow the smooth functioning of a society&lt;&#x2F;li&gt;
&lt;li&gt;and the thought of afterlife allow us to do good deeds to other as a desire to get a place in heaven which is just selfish&lt;&#x2F;li&gt;
&lt;li&gt;not everyone wants to be in heaven but everyone wants to get out of hell, this scaring is enough for people to make them incline towards god&lt;&#x2F;li&gt;
&lt;li&gt;people can be good to each other without the thought of afterlife also&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;whats-my-interpretation-of-god&quot;&gt;Whats my interpretation of god&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;god is representation of randomness&lt;&#x2F;li&gt;
&lt;li&gt;I am greatefull to the randomness that the value of G came out to be 9.80665, perfect for life form to exist on this earth&lt;&#x2F;li&gt;
&lt;li&gt;and I also know that their is a reason to this which I simply dont know&lt;&#x2F;li&gt;
&lt;li&gt;most people confuses this as the creation of god but we know that the presence of god is simply not proven yet&lt;&#x2F;li&gt;
&lt;li&gt;so instead of praying to a fictional character, I will choose to be mindfull about the presence of the randomness&lt;&#x2F;li&gt;
&lt;li&gt;this allow me to detach from the heavy baggage of rituals and other illogical believes which come with religion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;i-dont-have-to-believe-in-good&quot;&gt;I dont have to believe in good&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Live a good life,&lt;&#x2F;li&gt;
&lt;li&gt;if their gods
&lt;ul&gt;
&lt;li&gt;if they are just
&lt;ul&gt;
&lt;li&gt;they will welcome you based on virtues you have lived by&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;if gods are unjust
&lt;ul&gt;
&lt;li&gt;dont worship them&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;if their are no gods
&lt;ul&gt;
&lt;li&gt;you will be gone but lived a noble life&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Happiness</title>
        <published>2022-08-14T00:00:00+00:00</published>
        <updated>2022-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/happiness/"/>
        <id>https://dhruv.fyi/posts/happiness/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/happiness/">&lt;h2 id=&quot;what-is-happiness&quot;&gt;What is Happiness&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Is it a state when you are not sad&lt;&#x2F;li&gt;
&lt;li&gt;you are not sad when people do something which is beneficial for their survival and reproduction&lt;&#x2F;li&gt;
&lt;li&gt;you have this feeling of happiness, when your brain rewards you with some chemicals&lt;&#x2F;li&gt;
&lt;li&gt;do we have to be happy all the time ??&lt;&#x2F;li&gt;
&lt;li&gt;Is it immoral to not be happy ??&lt;&#x2F;li&gt;
&lt;li&gt;Is happiness a social construct ??&lt;&#x2F;li&gt;
&lt;li&gt;Why do feel sad for people who are not happy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-can-you-be-happy&quot;&gt;How can you be happy&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;have a sense of belonging&lt;&#x2F;li&gt;
&lt;li&gt;have a sense of agency&lt;&#x2F;li&gt;
&lt;li&gt;have a sense of purpose&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;find-your-purpose-in-a-tribe&quot;&gt;Find your purpose in a tribe&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;find-a-tribe&quot;&gt;Find a tribe&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;can be your friends, your family, someone you love, a group of people sharing common interests etc. etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;get-accepted-by-the-tribe&quot;&gt;Get accepted by the tribe&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;have a sense of belonging&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;help-the-tribe&quot;&gt;Help the tribe&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;make efforts and have a sense that your efforts matter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;get-appreciated-by-the-tribe-for-your-efforts&quot;&gt;Get appreciated by the tribe for your efforts&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;acknowledged by the tribe for your efforts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Car Radio - Twenty One Pilots</title>
        <published>2022-08-08T00:00:00+00:00</published>
        <updated>2022-08-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/car-radio-by-top/"/>
        <id>https://dhruv.fyi/posts/car-radio-by-top/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/car-radio-by-top/">&lt;h2 id=&quot;distracting-yourself-by-listening-to-car-radio&quot;&gt;distracting yourself by listening to car radio&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;_&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-_ &quot;&gt;&lt;code class=&quot;language-_&quot; data-lang=&quot;_&quot;&gt;&lt;span&gt;I ponder of something great
&lt;&#x2F;span&gt;&lt;span&gt;My lungs will fill and then deflate
&lt;&#x2F;span&gt;&lt;span&gt;They fill with fire
&lt;&#x2F;span&gt;&lt;span&gt;Exhale desire
&lt;&#x2F;span&gt;&lt;span&gt;I know it&amp;#39;s dire
&lt;&#x2F;span&gt;&lt;span&gt;My time today
&lt;&#x2F;span&gt;&lt;span&gt;I have these thoughts
&lt;&#x2F;span&gt;&lt;span&gt;So often I ought
&lt;&#x2F;span&gt;&lt;span&gt;To replace that slot
&lt;&#x2F;span&gt;&lt;span&gt;With what I once bought
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;Cause somebody stole
&lt;&#x2F;span&gt;&lt;span&gt;My car radio
&lt;&#x2F;span&gt;&lt;span&gt;And now I just sit in silence
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;he distracted himself by listening to his car radio, but someone
stole it&lt;&#x2F;li&gt;
&lt;li&gt;we distract ourselves from our meaningless by clinging to some idea,
some person, some materialistic thing&lt;&#x2F;li&gt;
&lt;li&gt;some became nihilist, some became hedonist, some became slave, some accept religion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dealing-with-existential-crisis&quot;&gt;dealing with existential crisis&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;_&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-_ &quot;&gt;&lt;code class=&quot;language-_&quot; data-lang=&quot;_&quot;&gt;&lt;span&gt;Sometimes quiet is violent
&lt;&#x2F;span&gt;&lt;span&gt;I find it hard to hide it
&lt;&#x2F;span&gt;&lt;span&gt;My pride is no longer inside
&lt;&#x2F;span&gt;&lt;span&gt;It&amp;#39;s on my sleeve
&lt;&#x2F;span&gt;&lt;span&gt;My skin will scream
&lt;&#x2F;span&gt;&lt;span&gt;Reminding me of
&lt;&#x2F;span&gt;&lt;span&gt;Who I killed inside my dream
&lt;&#x2F;span&gt;&lt;span&gt;I hate this car that I&amp;#39;m driving
&lt;&#x2F;span&gt;&lt;span&gt;There&amp;#39;s no hiding for me
&lt;&#x2F;span&gt;&lt;span&gt;I&amp;#39;m forced to deal with what I feel
&lt;&#x2F;span&gt;&lt;span&gt;There is no distraction to mask what is real
&lt;&#x2F;span&gt;&lt;span&gt;I could pull the steering wheel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;he got to know that his pride is not inside him but in how he is
perceived by others&lt;&#x2F;li&gt;
&lt;li&gt;he now know that he had killed himself in his dreams, just to fit in
and now their is no car radio to distract him from this guilt&lt;&#x2F;li&gt;
&lt;li&gt;he is fed up to the point that he even thought of killing himself (pulling the
steering wheel)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;it-is-a-frightening-thought&quot;&gt;it is a frightening thought&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;_&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-_ &quot;&gt;&lt;code class=&quot;language-_&quot; data-lang=&quot;_&quot;&gt;&lt;span&gt;I ponder of something terrifying
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;Cause this time there&amp;#39;s no sound to hide behind
&lt;&#x2F;span&gt;&lt;span&gt;I find over the course of our human existence
&lt;&#x2F;span&gt;&lt;span&gt;One thing consists of consistence
&lt;&#x2F;span&gt;&lt;span&gt;And it&amp;#39;s that we&amp;#39;re all battling fear
&lt;&#x2F;span&gt;&lt;span&gt;Oh dear, I don&amp;#39;t know if we know why we&amp;#39;re here
&lt;&#x2F;span&gt;&lt;span&gt;Oh my,
&lt;&#x2F;span&gt;&lt;span&gt;Too deep
&lt;&#x2F;span&gt;&lt;span&gt;Please stop thinking
&lt;&#x2F;span&gt;&lt;span&gt;I liked it better when my car had sound
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;this feeling, this thought is so frightening for him and he can’t
suppress these&lt;&#x2F;li&gt;
&lt;li&gt;only thing that is consistent in everybody’s life is that they are
constantly battling with their suffering and fear&lt;&#x2F;li&gt;
&lt;li&gt;He wants to stop thinking about this, and just be &lt;em&gt;normal&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;but ironically, normal is defined by others, and if you dont fit in
their template of normal then you are not accepted as normal&lt;&#x2F;li&gt;
&lt;li&gt;He wants to be &lt;em&gt;normal&lt;&#x2F;em&gt; and live in a delusional reality, or does he !&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dealing-with-it&quot;&gt;dealing with it&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;_&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-_ &quot;&gt;&lt;code class=&quot;language-_&quot; data-lang=&quot;_&quot;&gt;&lt;span&gt;There are things we can do
&lt;&#x2F;span&gt;&lt;span&gt;But from the things that work there are only two
&lt;&#x2F;span&gt;&lt;span&gt;And from the two that we choose to do
&lt;&#x2F;span&gt;&lt;span&gt;Peace will win
&lt;&#x2F;span&gt;&lt;span&gt;And fear will lose
&lt;&#x2F;span&gt;&lt;span&gt;There&amp;#39;s faith and there&amp;#39;s sleep
&lt;&#x2F;span&gt;&lt;span&gt;We need to pick one please because
&lt;&#x2F;span&gt;&lt;span&gt;Faith is to be awake
&lt;&#x2F;span&gt;&lt;span&gt;And to be awake is for us to think
&lt;&#x2F;span&gt;&lt;span&gt;And for us to think is to be alive
&lt;&#x2F;span&gt;&lt;span&gt;And I will try with every rhyme
&lt;&#x2F;span&gt;&lt;span&gt;To come across like I am dying
&lt;&#x2F;span&gt;&lt;span&gt;To let you know you need to try to think
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;now that you know that life has no meaning, you just accept it&lt;&#x2F;li&gt;
&lt;li&gt;enjoy it or you become delusional just like the majority of people&lt;&#x2F;li&gt;
&lt;li&gt;to have faith is to be awake and think (&lt;em&gt;“I think therefore I am” -
Rene Descartes&lt;&#x2F;em&gt;, a cliche quote ik)&lt;&#x2F;li&gt;
&lt;li&gt;the only thing that separates alive and dead is their conciousness,
their ability to think&lt;&#x2F;li&gt;
&lt;li&gt;he is dying to let others know about what he just discovered, and
force them to think, as it liberated him&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Map, Filter, Reduce in python</title>
        <published>2022-07-18T00:00:00+00:00</published>
        <updated>2022-07-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/map-filter-reduce-in-python/"/>
        <id>https://dhruv.fyi/posts/map-filter-reduce-in-python/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/map-filter-reduce-in-python/">&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;     li = [x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;map&quot;&gt;map:&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  li = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: x&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,li))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;map(function,iteritable)&lt;&#x2F;li&gt;
&lt;li&gt;return a map object after applying given function to all elements of, which can be
then converted to a list
iteritable&lt;&#x2F;li&gt;
&lt;li&gt;equivalent to&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;li:
&lt;&#x2F;span&gt;&lt;span&gt;      x = x&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;filter&quot;&gt;filter:&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  even = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;: x%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;,li))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;filter(function,iteritable)&lt;&#x2F;li&gt;
&lt;li&gt;return a filter object after applying given function to all elements
of iteritable&lt;&#x2F;li&gt;
&lt;li&gt;equivalent to&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  even = []
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;li:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          even.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;reduce&quot;&gt;reduce:&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;functools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;reduce
&lt;&#x2F;span&gt;&lt;span&gt;  maxx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x &amp;gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;y, li)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(maxx)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;reduce(function,iteritable)&lt;&#x2F;li&gt;
&lt;li&gt;have to import it from functools module&lt;&#x2F;li&gt;
&lt;li&gt;return a map object after applying given function to all elements of
iteritable&lt;&#x2F;li&gt;
&lt;li&gt;equivalent to&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;  y = li[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  maxx = y
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;li:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x &amp;gt; y :
&lt;&#x2F;span&gt;&lt;span&gt;          maxx = x
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          maxx = y
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(maxx)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Absurdism Extentialism Nihilism</title>
        <published>2022-07-17T00:00:00+00:00</published>
        <updated>2022-07-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://dhruv.fyi/posts/absurdism-extentialism-nihilism/"/>
        <id>https://dhruv.fyi/posts/absurdism-extentialism-nihilism/</id>
        
        <content type="html" xml:base="https://dhruv.fyi/posts/absurdism-extentialism-nihilism/">&lt;h2 id=&quot;nihilism&quot;&gt;Nihilism&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;I know that there is no objective meaning outside the illusions we (humans) as a society created.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;existentialism&quot;&gt;Existentialism&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;As humans, we have freedom to create our own meaning to live.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;essence&quot;&gt;Essence&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;make something what it is&lt;&#x2F;li&gt;
&lt;li&gt;a defined purpose&lt;&#x2F;li&gt;
&lt;li&gt;a meaning to life&lt;&#x2F;li&gt;
&lt;li&gt;an essence, necessary for anything to exist&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;absurdism&quot;&gt;Absurdism&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Constant tension between the hunger for meaning and impossibility of satisfying this drive
in a meaningless world.&lt;&#x2F;li&gt;
&lt;li&gt;Stare in this meaninglessness and show middle finger.&lt;&#x2F;li&gt;
&lt;li&gt;A fuck you to nihilism.&lt;&#x2F;li&gt;
&lt;li&gt;Camus says we have three options to face the absurd:
&lt;ul&gt;
&lt;li&gt;Suicide: kill yourself ffs&lt;&#x2F;li&gt;
&lt;li&gt;Philosophical suicide: believe in some meaning
(like religion, Marxism) without killing yourself,
swallow a pill of bullshit basically&lt;&#x2F;li&gt;
&lt;li&gt;Acceptance: rebel, reject hope, embrace nothingness,
don’t make happiness a distant goal,
spend time with yourself, be flexible, live with passion,
you are giving away your freedom while you think of suicide,
and choose love ….&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
